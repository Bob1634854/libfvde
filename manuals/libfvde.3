.Dd November 20, 2014
.Dt libfvde 3
.Os libfvde
.Sh NAME
.Nm libfvde.h
.Nd Library to access the FileVault Drive Encryption (FVDE) format
.Sh LIBRARY
.Lb libfvde
.Sh SYNOPSIS
.In libfvde.h
.Pp
Support functions
.Ft const char *
.Fn libfvde_get_version "void"
.Ft int
.Fn libfvde_get_access_flags_read
.Ft int
.Fn libfvde_get_codepage "int *codepage, libfvde_error_t **error"
.Ft int
.Fn libfvde_set_codepage "int codepage, libfvde_error_t **error"
.Ft int
.Fn libfvde_check_file_signature "const char *filename, libfvde_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libfvde_check_file_signature_wide "const wchar_t *filename, libfvde_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libfvde_check_file_signature_file_io_handle "libbfio_handle_t *file_io_handle, libfvde_error_t **error"
.Pp
Notify functions
.Ft void
.Fn libfvde_notify_set_verbose "int verbose"
.Ft int
.Fn libfvde_notify_set_stream "FILE *stream, libfvde_error_t **error"
.Ft int
.Fn libfvde_notify_stream_open "const char *filename, libfvde_error_t **error"
.Ft int
.Fn libfvde_notify_stream_close "libfvde_error_t **error"
.Pp
Error functions
.Ft void 
.Fn libfvde_error_free "libfvde_error_t **error"
.Ft int
.Fn libfvde_error_fprint "libfvde_error_t *error, FILE *stream"
.Ft int
.Fn libfvde_error_sprint "libfvde_error_t *error, char *string, size_t size"
.Ft int 
.Fn libfvde_error_backtrace_fprint "libfvde_error_t *error, FILE *stream"
.Ft int
.Fn libfvde_error_backtrace_sprint "libfvde_error_t *error, char *string, size_t size"
.Pp
Volume functions
.Ft int
.Fn libfvde_volume_initialize "libfvde_volume_t **volume, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_free "libfvde_volume_t **volume, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_signal_abort "libfvde_volume_t **volume, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_open "libfvde_volume_t *volume, const char *filename, int flags, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_close "libfvde_volume_t *volume, libfvde_error_t **error"
.Ft ssize_t
.Fn libfvde_volume_read_buffer "libfvde_volume_t *volume, void *buffer, size_t buffer_size, libfvde_error_t **error"
.Ft ssize_t
.Fn libfvde_volume_read_buffer_at_offset "libfvde_volume_t *volume, void *buffer, size_t buffer_size, off64_t offset, libfvde_error_t **error"
.Ft off64_t
.Fn libfvde_volume_seek_offset "libfvde_volume_t *volume, off64_t offset, int whence, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_get_offset "libfvde_volume_t *volume, off64_t *offset, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_get_logical_volume_size "libfvde_volume_t *volume, size64_t *size, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_get_logical_volume_encryption_method "libfvde_volume_t *volume, uint32_t *encryption_method, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_get_physical_volume_size "libfvde_volume_t *volume, size64_t *size, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_get_physical_volume_encryption_method "libfvde_volume_t *volume, uint32_t *encryption_method, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_set_utf8_password "libfvde_volume_t *volume, const uint8_t *utf8_string, size_t utf8_string_length, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_set_utf16_password "libfvde_volume_t *volume, const uint16_t *utf16_string, size_t utf16_string_length, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_set_utf8_recovery_password "libfvde_volume_t *volume, const uint8_t *utf8_string, size_t utf8_string_length, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_set_utf16_recovery_password "libfvde_volume_t *volume, const uint16_t *utf16_string, size_t utf16_string_length, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_read_encrypted_root_plist "libfvde_volume_t *volume, const char *filename, libfvde_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libfvde_volume_open_wide "libfvde_volume_t *volume, const wchar_t *filename, int flags, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_read_encrypted_root_plist_wide "libfvde_volume_t *volume, const wchar_t *filename, libfvde_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libfvde_volume_open_file_io_handle "libfvde_volume_t *volume, libbfio_handle_t *file_io_handle, int flags, libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_read_encrypted_root_plist_file_io_handle "libfvde_volume_t *volume, libbfio_handle_t *file_io_handle, libfvde_error_t **error"
.Pp
LVF encryption context and EncryptedRoot.plist file functions:
.Ft int
.Fn libfvde_encryption_context_plist_initialize "libfvde_encryption_context_plist_t **encryption_context_plist, libfvde_error_t **error"
.Ft int
.Fn libfvde_encryption_context_plist_free "libfvde_encryption_context_plist_t **encryption_context_plist, libfvde_error_t **error"
.Ft int
.Fn libfvde_encryption_context_plist_get_data_size "libfvde_encryption_context_plist_t *plist, size64_t *data_size, libfvde_error_t **error"
.Ft int
.fn libfvde_encryption_context_plist_copy_data "libfvde_encryption_context_plist_t *plist, uint8_t *data, size_t data_size, libfvde_error_t **error"
.Ft int
.Fn libfvde_encryption_context_plist_decrypt "libfvde_encryption_context_plist_t *plist, const uint8_t *key, size_t key_bit_size, libfvde_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libfvde_encryption_context_plist_read "libfvde_encryption_context_plist_t *plist, libbfio_handle_t *file_io_handle, libfvde_error_t **error"
.Sh DESCRIPTION
The
.Fn libfvde_get_version
function is used to retrieve the library version.
.Sh RETURN VALUES
Most of the functions return NULL or -1 on error, dependent on the return type. For the actual return values refer to libfvde.h
.Sh ENVIRONMENT
None
.Sh FILES
None
.Sh NOTES
libfvde supports both UTF-8 and UTF-16 encoded strings except for filenames.
Some platforms like WINAPI require wide character support for Unicode filenames.
To compile libfvde with wide character support use
.Ar ./configure --enable-wide-character-type=yes
or pass the definition
.Ar _UNICODE
 or
.Ar UNICODE
 to the compiler (i.e. in case of Microsoft Visual Studio (MSVS) C++).

To have other code to determine if libfvde was compiled with wide character support it defines
.Ar LIBBDE_HAVE_WIDE_CHARACTER_TYPE
 in libfvde/features.h.

libfvde allows to be compiled with chained IO support using libbfio.
libfvde will automatically detect if a compatible version of libbfio is available.

To have other code to determine if libfvde was compiled with libbfio support it defines
.Ar LIBBDE_HAVE_BFIO
 in libfvde/features.h.

.Sh BUGS
Please report bugs of any kind to <joachim.metz@gmail.com> or on the project website:
http://code.google.com/p/libfvde/
.Sh AUTHOR
These man pages were written by Joachim Metz.
.Sh COPYRIGHT
Copyright 2011-2014, Joachim Metz <joachim.metz@gmail.com>.
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.Sh SEE ALSO
the libfvde.h include file
